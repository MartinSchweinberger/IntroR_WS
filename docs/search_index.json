[["introduction-to-r.html", "Section 2 Introduction to R 2.1 Installing R and RStudio 2.2 Preparation 2.3 R and RStudio Basics 2.4 Getting started with R 2.5 Working with tables 2.6 More on working with text 2.7 Working with figures 2.8 Ending R sessions 2.9 Going further", " Section 2 Introduction to R Here I want to show you how to get started with R. As such, this section is aimed at fresh users or beginners with the aim of showcasing how to set up a R session in RStudio, how to set up R projects, and how to do basic operations using R. The aim is not to provide a fully-fledged from beginner-to-expert, all-you-need-to-know tutorial but rather to show how to properly and tidily set up a project before you start coding and exemplify common operations such as loading and manipulation tabular data and generating basic visualization using R. The entire R Notebook for the tutorial can be downloaded here. If you want to render the R Notebook on your machine, i.e. knitting the document to html or a pdf, you need to make sure that you have R and RStudio installed and you also need to download the bibliography file and store it in the same folder where you store the Rmd or the Rproj file. Here is an overview of cheat sheets for popular and frequently used packages providde by RStudio (cheat sheets are short overviews with explanations and examples of useful functions). If you already have experience with R, both @wickham2016r (see here) and @gillespie2016efficient (see here) are highly recommendable and excellent resources for improving your coding abilities and workflows in R. 2.1 Installing R and RStudio You have NOT yet installed R on your computer? You have a Windows computer? Then click here for downloading and installing R You have a Mac? Then click here for downloading and installing R You have NOT yet installed RStudio on your computer? Click here for downloading and installing RStudio. You can find a more elaborate explanation of how to download and install R and RStudio here that was created by the UQ library. 2.2 Preparation Before you actually open R or RStudio, there things to consider that make working in R much easier and give your workflow a better structure. Imagine it like this: when you want to write a book, you could simply take pen and paper and start writing or you could think about what you want to write about, what different chapters your book would consist of, which chapters to write first, what these chapters will deal with, etc. The same is true for R: you could simply open R and start writing code or you can prepare you session and structure what you will be doing. 2.2.1 Before you start working with R/RStudio (Folder Structure and R projects) Before actually starting with writing code, you should prepare the session by going through the following steps: 2.2.1.1 1. Create a folder for your project In that folder, create the following sub-folders (you can, of course, adapt this folder template to match your needs) data (you do not create this folder for the present workshop as you can simply use the data folder that you downloaded for this workshop instead) images tables docs The folder for your project could look like the the one shown below. Once you have created your project folder, you can go ahead with RStudio. 2.2.1.2 2. Open RStudio This is what RStudio looks like when you first open it: In RStudio, click on File You can use the drop-down menu to create a R project 2.2.1.3 3. R Projects In RStudio, click on New Project Next, confirm by clicking OK and select Existing Directory. Then, navigate to where you have just created the project folder for this workshop. Once you click on Open, you have created a new R project 2.2.1.4 4. R Notebooks In this project, click on File Click on New File and then on R Notebook as shown below. This R Notebook will be the file in which you do all your work. 2.2.1.5 5. Updating R In case you encounter issues when opening the R Notebook (e.g., if you receive an error message saying that you need to update packages which then do not install properly), you may have to update your R version. To update your current R version to the recent release please copy the code chunk shown below into the console pane (the bottom left pane) and click on Enter to run the code. The code will automatically update your version of R to the most recent release. During the update, you may be asked to specify some options - in that case, you can simply click on Accept and Next and accept the default settings. # install installr package install.packages(&quot;installr&quot;) # load installr package library(installr) # update r updateR() 2.2.1.6 6. Optimizing R project options When you work with projects, it is recommendable to control the so-called environment. This means that you make your R Project self-contained by storing all packages that are used in project in a library in the R Project (instead of in the general R library on your computer). Having a library in your R Project means that you can share your project folder wit other people and they will automatically have the same package versions that you have sued which makes your code more robust and reproducible. So, how to create such an environment? You simply click on Tools (at the very top right of RStudio), then click onProject Options then click on Environments and then check Use renv with this project. Now, when you install packages, they will be installed in the package library (rather than the general R library on your computer). 2.2.1.7 7. Getting started with R Notebooks You can now start writing in this R Notebook. For instance, you could start by changing the title of the R Notebook and describe what you are doing (what this Notebook contains). Below is a picture of what this document looked like when I started writing it. When you write in the R Notebook, you use what is called R Markdown which is explained below. 2.2.1.8 R Markdown The Notebook is an R Markdown document: a Rmd (R Markdown) file is more than a flat text document: it’s a program that you can run in R and which allows you to combine prose and code, so readers can see the technical aspects of your work while reading about their interpretive significance. You can get a nice and short overview of the formatting options in R Markdown (Rmd) files here. R Markdown allows you to make your research fully transparent and reproducible! If a couple of years down the line another researcher or a journal editor asked you how you have done your analysis, you can simply send them the Notebook or even the entire R-project folder. As such, Rmd files are a type of document that allows to include snippets of code (and any outputs such as tables or graphs) in plain text while encoding the structure of your document by using simple typographical symbols to encode formatting (rather than HTML tags or format types such as Main header or Header level 1 in Word). Markdown is really quite simple to learn and these resources may help: The Markdown Wikipedia page includes a very handy chart of the syntax. John Gruber developed Markdown and his introduction to the syntax is worth browsing. This interactive Markdown tutorial will teach you the syntax in a few minutes. 2.3 R and RStudio Basics RStudio is a so-called IDE - Integrated Development Environment. The interface provides easy access to R. The advantage of this application is that R programs and files as well as a project directory can be managed easily. The environment is capable of editing and running program code, viewing outputs and rendering graphics. Furthermore, it is possible to view variables and data objects of an R-script directly in the interface. 2.3.1 RStudio: Panes The GUI - Graphical User Interface - that RStudio provides divides the screen into four areas that are called panes: File editor Environment variables R console Management panes (File browser, plots, help display and R packages). The two most important are the R console (bottom left) and the File editor (or Script in the top left). The Environment variables and Management panes are on the right of the screen and they contain: Environment (top): Lists all currently defined objects and data sets History (top): Lists all commands recently used or associated with a project Plots (bottom): Graphical output goes here Help (bottom): Find help for R packages and functions. Don’t forget you can type ? before a function name in the console to get info in the Help section. Files (bottom): Shows the files available to you in your working directory These RStudio panes are shown below. 2.3.1.1 R Console (bottom left pane) The console pane allows you to quickly and immediately execute R code. You can experiment with functions here, or quickly print data for viewing. Type next to the &gt; and press Enter to execute. EXERCISE TIME! ` You can use R like a calculator. Try typing 2+8 into the R console. Answer 2+8 ## [1] 10 ` Here, the plus sign is the operator. Operators are symbols that represent some sort of action. However, R is, of course, much more than a simple calculator. To use R more fully, we need to understand objects, functions, and indexing - which we will learn about as we go. For now, think of objects as nouns and functions as verbs. 2.3.1.2 Running commands from a script To run code from a script, insert your cursor on a line with a command, and press CTRL/CMD+Enter. Or highlight some code to only run certain sections of the command, then press CTRL/CMD+Enter to run. Alternatively, use the Run button at the top of the pane to execute the current line or selection (see below). 2.3.1.3 Script Editor (top left pane) In contrast to the R console, which quickly runs code, the Script Editor (in the top left) does not automatically execute code. The Script Editor allows you to save the code essential to your analysis. You can re-use that code in the moment, refer back to it later, or publish it for replication. Now, that we have explored RStudio, we are ready to get started with R! 2.4 Getting started with R This section introduces some basic concepts and procedures that help optimize your workflow in R. 2.4.1 Setting up an R session At the beginning of a session, it is common practice to define some basic parameters. This is not required or even necessary, but it may just help further down the line. This session preparation may include specifying options. In the present case, we want R to show numbers as numbers up to 100 decimal points (and not show them in mathematical notation (in mathematical notation, 0.007 would be represented as 0.7e-3)) want R to show maximally 100 results (otherwise, it can happen that R prints out pages-after-pages of some numbers). Again, the session preparation is not required or necessary but it can help avoid errors. # set options options(stringsAsFactors = F) options(scipen = 100) options(max.print=100) In script editor pane of RStudio, this would look like this: 2.4.2 Packages When using R, most of the functions are not loaded or even installing automatically. Instead, most functions are in contained in what are called packages. R comes with about 30 packages (“base R”). There are over 10,000 user-contributed packages; you can discover these packages online. A prevalent collection of packages is the Tidyverse, which includes ggplot2, a package for making graphics. Before being able to use a package, we need to install the package (using the install.packages function) and load the package (using the library function). However, a package only needs to be installed once(!) and can then simply be loaded. When you install a package, this will likely install several other packages it depends on. You should have already installed tidyverse before the workshop. You must load the package in any new R session where you want to use that package. Below I show what you need to type when you want to install the tidyverse, the tidytext, the quanteda, the readxl, and the tm packages (which are the packages that we will need in this workshop). install.packages(&quot;tidyverse&quot;) install.packages(&quot;tidytext&quot;) install.packages(&quot;quanteda&quot;) install.packages(&quot;readxl&quot;) install.packages(&quot;tm&quot;) install.packages(&quot;tokenizers&quot;) install.packages(&quot;here&quot;) install.packages(&quot;flextable&quot;) # install klippy for copy-to-clipboard button in code chunks install.packages(&quot;remotes&quot;) remotes::install_github(&quot;rlesur/klippy&quot;) To load these packages, use the library function which takes the package name as its main argument. library(tidyverse) library(tidytext) library(quanteda) library(readxl) library(tm) library(tokenizers) library(here) library(flextable) # activate klippy for copy-to-clipboard button klippy::klippy() The session preparation section of your Rmd file will thus also state which packages a script relies on. In script editor pane of RStudio, the code blocks that install and activate packages would look like this: 2.4.3 Getting help When working with R, you will encounter issues and face challenges. A very good thing about R is that it provides various ways to get help or find information about the issues you face. 2.4.3.1 Finding help within R To get help regrading what functions a package contains, which arguments a function takes or to get information about how to use a function, you can use the help function or the apropos. function or you can simply type a ? before the package or two ?? if this does not give you any answers. help(tidyverse) apropos(&quot;tidyverse&quot;) ?require There are also other “official” help resources from R/RStudio. Read official package documentation, see vignettes, e.g., Tidyverse https://cran.r-project.org/package=tidyverse Use the RStudio Cheat Sheets at https://www.rstudio.com/resources/cheatsheets/ Use the RStudio Help viewer by typing ? before a function or package Check out the keyboard shortcuts Help under Tools in RStudio for some good tips 2.4.3.2 Finding help online One great thing about R is that you can very often find an answer to your question online. Google your error! See http://r4ds.had.co.nz/introduction.html#getting-help-and-learning-more for excellent suggestions on how to find help for a specific question online. 2.5 Working with tables We will now start working with data in R. As most of the data that we work with comes in tables, we will focus on this first before moving on to working with text data. 2.5.1 Loading data from the web To show, how data can be downloaded from the web, we will download a tab-separated txt-file. Translated to prose, the code below means Create an object called icebio and in that object, store the result of the read.delim function. read.delim stands for read delimited file and it takes the URL from which to load the data (or the path to the data on your computer) as its first argument. The sep stand for separator and the \\t stands for tab-separated and represents the second argument that the read.delim function takes. The third argument, header, can take either T(RUE) or F(ALSE) and it tells R if the data has column names (headers) or not. 2.5.2 Functions and Objects In R, functions always have the following form: function(argument1, argument2, ..., argumentN). Typically a function does something to an object (e.g. a table), so that the first argument typically specifies the data to which the function is applied. Other arguments then allow to add some information. Just as a side note, functions are also objects that do not contain data but instructions. To assign content to an object, we use &lt;- or = so that the we provide a name for an object, and then assign some content to it. For example, MyObject &lt;- 1:3 means Create an object called MyObject. this object should contain the numbers 1 to 3. # load data icebio &lt;- read.delim(&quot;https://slcladal.github.io/data/icebio.txt&quot;, sep = &quot;\\t&quot;, header = T) 2.5.3 Inspecting data There are many ways to inspect data. We will briefly go over the most common ways to inspect data. The head function takes the data-object as its first argument and automatically shows the first 6 elements of an object (or rows if the data-object has a table format). head(icebio) ## id file.speaker.id text.id spk.ref zone date sex age ## 1 1 &lt;S1A-001$A&gt; S1A-001 A northern ireland 1990-1994 male 34-41 ## 2 2 &lt;S1A-001$B&gt; S1A-001 B northern ireland 1990-1994 female 34-41 ## 3 3 &lt;S1A-002$?&gt; S1A-002 ? &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 4 4 &lt;S1A-002$A&gt; S1A-002 A northern ireland 2002-2005 female 26-33 ## 5 5 &lt;S1A-002$B&gt; S1A-002 B northern ireland 2002-2005 female 19-25 ## 6 6 &lt;S1A-002$C&gt; S1A-002 C northern ireland 2002-2005 male 50+ ## word.count ## 1 765 ## 2 1298 ## 3 23 ## 4 391 ## 5 47 ## 6 200 We can also use the head function to inspect more or less elements and we can specify the number of elements (or rows) that we want to inspect as a second argument. In the example below, the 4 tells R that we only want to see the first 4 rows of the data. head(icebio, 4) ## id file.speaker.id text.id spk.ref zone date sex age ## 1 1 &lt;S1A-001$A&gt; S1A-001 A northern ireland 1990-1994 male 34-41 ## 2 2 &lt;S1A-001$B&gt; S1A-001 B northern ireland 1990-1994 female 34-41 ## 3 3 &lt;S1A-002$?&gt; S1A-002 ? &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 4 4 &lt;S1A-002$A&gt; S1A-002 A northern ireland 2002-2005 female 26-33 ## word.count ## 1 765 ## 2 1298 ## 3 23 ## 4 391 EXERCISE TIME! ` Download and inspect the first 7 rows of the data set that you can find under this URL: https://slcladal.github.io/data/lmmdata.txt. Can you guess what the data is about? Answer ex1data &lt;- read.delim(&quot;https://slcladal.github.io/data/lmmdata.txt&quot;, sep = &quot;\\t&quot;) head(ex1data, 7) ## Date Genre Text Prepositions Region ## 1 1736 Science albin 166.01 North ## 2 1711 Education anon 139.86 North ## 3 1808 PrivateLetter austen 130.78 North ## 4 1878 Education bain 151.29 North ## 5 1743 Education barclay 145.72 North ## 6 1908 Education benson 120.77 North ## 7 1906 Diary benson 119.17 North The data is about texts and the different columns provide information about the texts such as when the texts were written (Date), the genre the texts represent (Genre), the name of the texts (Text), the relative frequencies of prepositions the texts contain (Prepositions), and the region where the author was from (Region). ` 2.5.4 Accessing individual cells in a table If you want to access specific cells in a table, you can do so by typing the name of the object and then specify the rows and columns in square brackets (i.e. data[row, column]). For example, icebio[2, 4] would show the value of the cell in the second row and fourth column of the object icebio. We can also use the colon to define a range (as shown below, where 1:5 means from 1 to 5 and 1:3 means from 1 to 3) The command icebio[1:5, 1:3] thus means: Show me the first 5 rows and the first 3 columns of the data-object that is called icebio. icebio[1:5, 1:3] ## id file.speaker.id text.id ## 1 1 &lt;S1A-001$A&gt; S1A-001 ## 2 2 &lt;S1A-001$B&gt; S1A-001 ## 3 3 &lt;S1A-002$?&gt; S1A-002 ## 4 4 &lt;S1A-002$A&gt; S1A-002 ## 5 5 &lt;S1A-002$B&gt; S1A-002 EXERCISE TIME! ` How would you inspect the content of the cells in 4th column, rows 3 to 5 of the icebio data set? Answer icebio[3:5, 4] ## [1] &quot;?&quot; &quot;A&quot; &quot;B&quot; ` Inspecting the structure of data You can use the str function to inspect the structure of a data set. This means that this function will show the number of observations (rows) and variables (columns) and tell you what type of variables the data consists of int = integer chr = character string num = numeric fct = factor str(icebio) ## &#39;data.frame&#39;: 1332 obs. of 9 variables: ## $ id : int 1 2 3 4 5 6 7 8 9 10 ... ## $ file.speaker.id: chr &quot;&lt;S1A-001$A&gt;&quot; &quot;&lt;S1A-001$B&gt;&quot; &quot;&lt;S1A-002$?&gt;&quot; &quot;&lt;S1A-002$A&gt;&quot; ... ## $ text.id : chr &quot;S1A-001&quot; &quot;S1A-001&quot; &quot;S1A-002&quot; &quot;S1A-002&quot; ... ## $ spk.ref : chr &quot;A&quot; &quot;B&quot; &quot;?&quot; &quot;A&quot; ... ## $ zone : chr &quot;northern ireland&quot; &quot;northern ireland&quot; NA &quot;northern ireland&quot; ... ## $ date : chr &quot;1990-1994&quot; &quot;1990-1994&quot; NA &quot;2002-2005&quot; ... ## $ sex : chr &quot;male&quot; &quot;female&quot; NA &quot;female&quot; ... ## $ age : chr &quot;34-41&quot; &quot;34-41&quot; NA &quot;26-33&quot; ... ## $ word.count : int 765 1298 23 391 47 200 464 639 308 78 ... The summary function summarizes the data. summary(icebio) ## id file.speaker.id text.id spk.ref ## Min. : 1.0 Length:1332 Length:1332 Length:1332 ## 1st Qu.: 333.8 Class :character Class :character Class :character ## Median : 666.5 Mode :character Mode :character Mode :character ## Mean : 666.5 ## 3rd Qu.: 999.2 ## Max. :1332.0 ## zone date sex age ## Length:1332 Length:1332 Length:1332 Length:1332 ## Class :character Class :character Class :character Class :character ## Mode :character Mode :character Mode :character Mode :character ## ## ## ## word.count ## Min. : 0.0 ## 1st Qu.: 66.0 ## Median : 240.5 ## Mean : 449.9 ## 3rd Qu.: 638.2 ## Max. :2565.0 2.5.5 Tabulating data We can use the table function to create basic tables that extract raw frequency information. The following command tells us how many instances there are of each level of the variable date in the icebio. TIP ` In order to access specific columns of a data frame, you can first type the name of the data set followed by a $ symbol and then the name of the column (or variable). ` table(icebio$date) ## ## 1990-1994 1995-2001 2002-2005 ## 905 67 270 Alternatively, you could, of course, index the column by using its position in the data set like this: icebio[, 6] - the result of table(icebio[, 6]) and table(icebio$date) are the same! Also note that here we leave out indexes for rows to tell R that we want all rows. When you want to cross-tabulate columns, it is often better to use the ftable function (ftable stands for frequency table). ftable(icebio$age, icebio$sex) ## female male ## ## 0-18 5 7 ## 19-25 163 65 ## 26-33 83 36 ## 34-41 35 58 ## 42-49 35 97 ## 50+ 63 138 EXERCISE TIME! ` Using the table function, how many women are in the data collected between 2002 and 2005? Answer table(icebio$date, icebio$sex) ## ## female male ## 1990-1994 338 562 ## 1995-2001 4 58 ## 2002-2005 186 84 Using the ftable function, how many men are are from northern Ireland in the data collected between 1990 and 1994? Answer ftable(icebio$date, icebio$zone, icebio$sex) ## female male ## ## 1990-1994 mixed between ni and roi 18 13 ## non-corpus speaker 7 22 ## northern ireland 104 289 ## republic of ireland 209 238 ## 1995-2001 mixed between ni and roi 0 0 ## non-corpus speaker 1 1 ## northern ireland 2 36 ## republic of ireland 1 21 ## 2002-2005 mixed between ni and roi 19 7 ## non-corpus speaker 7 9 ## northern ireland 122 41 ## republic of ireland 38 27 ` 2.5.6 Saving data to your computer To save tabular data on your computer, you can use the write.table function. This function requires the data that you want to save as its first argument, the location where you want to save the data as the second argument and the type of delimiter as the third argument. write.table(icebio, here::here(&quot;data&quot;, &quot;icebio.txt&quot;), sep = &quot;\\t&quot;) A word about paths In the code chunk above, the sequence here::here(\"data\", \"icebio.txt\") is a handy way to define a path. A path is simply the location where a file is stored on your computer or on the internet (which typically is a server - which is just a fancy term for a computer - somewhere on the globe). The here function from thehere package allows to simply state in which folder a certain file is and what file you are talking about. In this case, we want to access the file icebio (which is a txt file and thus has the appendix .txt) in the data folder. R will always start looking in the folder in which your project is stored. If you want to access a file that is stored somewhere else on your computer, you can also define the full path to the folder in which the file is. In my case, this would be D:/Uni/UQ/SLC/LADAL/SLCLADAL.github.io/data. However, as the data folder in in the folder where my Rproj file is, I only need to specify that the file is in the data folder within the folder in which my Rproj file is located. A word about package naming Another thing that is notable in the sequence here::here(\"data\", \"icebio.txt\") is that I specified that the here function is part of the here package. This is what I meant by writing here::here which simply means use the here function from here package (package::function). This may appear to be somewhat redundant but it happens quite frequently, that different packages have functions that have the same names. In such cases, R will simply choose the function from the package that was loaded last. To prevent R from using the wrong function, it makes sense to specify the package AND the function (as I did in the sequence here::here). I only use functions without specify the package if the function is part of base R. 2.5.7 Loading data from your computer To load tabular data from within your project folder (if it is in a tab-separated txt-file) you can also use the read.delim function. The only difference to loading from the web is that you use a path instead of a URL. If the txt-file is in the folder called data in your project folder, you would load the data as shown below. icebio &lt;- read.delim(here::here(&quot;data&quot;, &quot;icebio.txt&quot;), sep = &quot;\\t&quot;, header = T) However, you can always just use the full path (and you must do this is the data is not in your project folder). NOTEYou may have to change the path to the data! icebio &lt;- read.delim(here::here(&quot;data&quot;, &quot;icebio.txt&quot;), sep = &quot;\\t&quot;, header = T) To if this has worked, we will use the head function to see first 6 rows of the data head(icebio) ## id file.speaker.id text.id spk.ref zone date sex age ## 1 1 &lt;S1A-001$A&gt; S1A-001 A northern ireland 1990-1994 male 34-41 ## 2 2 &lt;S1A-001$B&gt; S1A-001 B northern ireland 1990-1994 female 34-41 ## 3 3 &lt;S1A-002$?&gt; S1A-002 ? &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 4 4 &lt;S1A-002$A&gt; S1A-002 A northern ireland 2002-2005 female 26-33 ## 5 5 &lt;S1A-002$B&gt; S1A-002 B northern ireland 2002-2005 female 19-25 ## 6 6 &lt;S1A-002$C&gt; S1A-002 C northern ireland 2002-2005 male 50+ ## word.count ## 1 765 ## 2 1298 ## 3 23 ## 4 391 ## 5 47 ## 6 200 2.5.8 Loading Excel data To load Excel spreadsheets, you can use the read_excel function from the readxl package as shown below. However, it may be necessary to install and activate the readxl package first. icebio &lt;- readxl::read_excel(here::here(&quot;data&quot;, &quot;ICEdata.xlsx&quot;)) We now briefly check column names to see if the loading of the data has worked. colnames(icebio) ## [1] &quot;id&quot; &quot;file.speaker.id&quot; &quot;text.id&quot; &quot;spk.ref&quot; ## [5] &quot;zone&quot; &quot;date&quot; &quot;sex&quot; &quot;age&quot; ## [9] &quot;word.count&quot; 2.5.9 Loading text data There are many functions that we can use to load text data into R. For example, we can use the readLines function as shown below. text &lt;- readLines(here::here(&quot;data&quot;, &quot;text2.txt&quot;)) # inspect first text element text[1] ## [1] &quot;The book is presented as a manuscript written by its protagonist, a middle-aged man named Harry Haller, who leaves it to a chance acquaintance, the nephew of his landlady. The acquaintance adds a short preface of his own and then has the manuscript published. The title of this \\&quot;real\\&quot; book-in-the-book is Harry Haller&#39;s Records (For Madmen Only).&quot; To load many texts, we can use a loop to read all texts in a folder as shown below. In a first step, we define the paths of the texts and then, we use the sapply function to loop over the paths and read them into R. # define paths paths &lt;- list.files(here::here(&quot;data/testcorpus&quot;), full.names = T) # load texts texts &lt;- sapply(paths, function(x){ readLines(x) }) # inspect first text element texts[1] ## $&lt;NA&gt; ## NULL A method achieving the same result which uses piping (more on what that is below) and tidyverse R code is shown below. # define paths texts &lt;- list.files(here::here(&quot;data/testcorpus&quot;), full.names = T, pattern = &quot;.*txt&quot;) %&gt;% purrr::map_chr(~ readr::read_file(.)) # inspect first text element texts[1] ## [1] NA 2.5.10 Renaming, Piping, and Filtering To rename existing columns in a table, you can use the rename command which takes the table as the first argument, the new name as the second argument, the an equal sign (=), and finally, the old name es the third argument. For example, renaming a column OldName as NewName in a table called MyTable would look like this: rename(MyTable, NewName = OldName). Piping is done using the %&gt;% sequence and it can be translated as and then. In the example below, we create a new object (icebio_edit) from the existing object (icebio) and then we rename the columns in the new object. When we use piping, we do not need to name the data we are using as this is provided by the previous step. icebio_edit &lt;- icebio %&gt;% dplyr::rename(Id = id, FileSpeakerId = file.speaker.id, File = colnames(icebio)[3], Speaker = colnames(icebio)[4]) # inspect data icebio_edit[1:5, 1:6] ## # A tibble: 5 × 6 ## Id FileSpeakerId File Speaker zone date ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 &lt;S1A-001$A&gt; S1A-001 A northern ireland 1990-1994 ## 2 2 &lt;S1A-001$B&gt; S1A-001 B northern ireland 1990-1994 ## 3 3 &lt;S1A-002$?&gt; S1A-002 ? NA NA ## 4 4 &lt;S1A-002$A&gt; S1A-002 A northern ireland 2002-2005 ## 5 5 &lt;S1A-002$B&gt; S1A-002 B northern ireland 2002-2005 A very handy way to rename many columns simultaneously, you can use the str_to_title function which capitalizes first letter of a word. In the example below, we capitalize all first letters of the column names of our current data. colnames(icebio_edit) &lt;- stringr::str_to_title(colnames(icebio_edit)) # inspect data icebio_edit[1:5, 1:6] ## # A tibble: 5 × 6 ## Id Filespeakerid File Speaker Zone Date ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 &lt;S1A-001$A&gt; S1A-001 A northern ireland 1990-1994 ## 2 2 &lt;S1A-001$B&gt; S1A-001 B northern ireland 1990-1994 ## 3 3 &lt;S1A-002$?&gt; S1A-002 ? NA NA ## 4 4 &lt;S1A-002$A&gt; S1A-002 A northern ireland 2002-2005 ## 5 5 &lt;S1A-002$B&gt; S1A-002 B northern ireland 2002-2005 To remove rows based on values in columns you can use the filter function. icebio_edit2 &lt;- icebio_edit %&gt;% dplyr::filter(Speaker != &quot;?&quot;, Zone != is.na(Zone), Date == &quot;2002-2005&quot;, Word.count &gt; 5) # inspect data head(icebio_edit2) ## # A tibble: 6 × 9 ## Id Filespeakerid File Speaker Zone Date Sex Age Word.count ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 4 &lt;S1A-002$A&gt; S1A-002 A northern ire… 2002… fema… 26-33 391 ## 2 5 &lt;S1A-002$B&gt; S1A-002 B northern ire… 2002… fema… 19-25 47 ## 3 6 &lt;S1A-002$C&gt; S1A-002 C northern ire… 2002… male 50+ 200 ## 4 7 &lt;S1A-002$D&gt; S1A-002 D northern ire… 2002… fema… 50+ 464 ## 5 8 &lt;S1A-002$E&gt; S1A-002 E mixed betwee… 2002… male 34-41 639 ## 6 9 &lt;S1A-002$F&gt; S1A-002 F northern ire… 2002… fema… 26-33 308 To select specific columns you can use the select function. icebio_selection &lt;- icebio_edit2 %&gt;% dplyr::select(File, Speaker, Word.count) # inspect data head(icebio_selection) ## # A tibble: 6 × 3 ## File Speaker Word.count ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 S1A-002 A 391 ## 2 S1A-002 B 47 ## 3 S1A-002 C 200 ## 4 S1A-002 D 464 ## 5 S1A-002 E 639 ## 6 S1A-002 F 308 You can also use the select function to remove specific columns. icebio_selection2 &lt;- icebio_edit2 %&gt;% dplyr::select(-Id, -File, -Speaker, -Date, -Zone, -Age) # inspect data head(icebio_selection2) ## # A tibble: 6 × 3 ## Filespeakerid Sex Word.count ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 &lt;S1A-002$A&gt; female 391 ## 2 &lt;S1A-002$B&gt; female 47 ## 3 &lt;S1A-002$C&gt; male 200 ## 4 &lt;S1A-002$D&gt; female 464 ## 5 &lt;S1A-002$E&gt; male 639 ## 6 &lt;S1A-002$F&gt; female 308 2.5.11 Ordering data To order data, for instance, in ascending order according to a specific column you can use the arrange function. icebio_ordered_asc &lt;- icebio_selection2 %&gt;% dplyr::arrange(Word.count) # inspect data head(icebio_ordered_asc) ## # A tibble: 6 × 3 ## Filespeakerid Sex Word.count ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 &lt;S1B-009$D&gt; female 6 ## 2 &lt;S1B-005$C&gt; female 7 ## 3 &lt;S1B-009$C&gt; male 7 ## 4 &lt;S1B-020$F&gt; male 7 ## 5 &lt;S1B-006$G&gt; female 9 ## 6 &lt;S2A-050$B&gt; male 9 To order data in descending order you can also use the arrange function and simply add a - before the column according to which you want to order the data. icebio_ordered_desc &lt;- icebio_selection2 %&gt;% dplyr::arrange(-Word.count) # inspect data head(icebio_ordered_desc) ## # A tibble: 6 × 3 ## Filespeakerid Sex Word.count ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 &lt;S2A-055$A&gt; female 2355 ## 2 &lt;S2A-047$A&gt; male 2340 ## 3 &lt;S2A-035$A&gt; female 2244 ## 4 &lt;S2A-048$A&gt; male 2200 ## 5 &lt;S2A-015$A&gt; male 2172 ## 6 &lt;S2A-054$A&gt; female 2113 The output shows that the female speaker in file S2A-005 with the speaker identity A has the highest word count with 2,355 words. EXERCISE TIME! ` Using the data called icebio, create a new data set called ICE_Ire_ordered and arrange the data in descending order by the number of words that each speaker has uttered. Who is the speaker with the highest word count? Answer ICE_Ire_ordered &lt;- icebio %&gt;% dplyr::arrange(-word.count) # inspect data head(ICE_Ire_ordered) ## # A tibble: 6 × 9 ## id file.speaker.id text.id spk.ref zone date sex age word.count ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 956 &lt;S2A-037$A&gt; S2A-037 A republic o… 1990… male NA 2565 ## 2 919 &lt;S2A-016$A&gt; S2A-016 A republic o… 1995… fema… 34-41 2482 ## 3 933 &lt;S2A-023$A&gt; S2A-023 A northern i… 1990… male 50+ 2367 ## 4 992 &lt;S2A-055$A&gt; S2A-055 A northern i… 2002… fema… 42-49 2355 ## 5 979 &lt;S2A-047$A&gt; S2A-047 A republic o… 2002… male 50+ 2340 ## 6 997 &lt;S2A-059$A&gt; S2A-059 A republic o… 1990… fema… NA 2305 ` 2.5.12 Creating and changing variables New columns are created, and existing columns can be changed, by using the mutate function. The mutate function takes two arguments (if the data does not have to be specified): the first argument is the (new) name of column that you want to create and the second is what you want to store in that column. The = tells R that the new column will contain the result of the second argument. In the example below, we create a new column called Texttype. This new column should contain the value PrivateDialoge if Filespeakerid contains the sequence S1A, the value PublicDialogue if Filespeakerid contains the sequence S1B, the value UnscriptedMonologue if Filespeakerid contains the sequence S2A, the value ScriptedMonologue if Filespeakerid contains the sequence S2B, the value of Filespeakerid if Filespeakerid neither contains S1A, S1B, S2A, nor S2B. icebio_texttype &lt;- icebio_selection2 %&gt;% dplyr::mutate(Texttype = dplyr::case_when(stringr::str_detect(Filespeakerid ,&quot;S1A&quot;) ~ &quot;PrivateDialoge&quot;, stringr::str_detect(Filespeakerid ,&quot;S1B&quot;) ~ &quot;PublicDialogue&quot;, stringr::str_detect(Filespeakerid ,&quot;S2A&quot;) ~ &quot;UnscriptedMonologue&quot;, stringr::str_detect(Filespeakerid ,&quot;S2B&quot;) ~ &quot;ScriptedMonologue&quot;, TRUE ~ Filespeakerid)) # inspect data head(icebio_texttype) ## # A tibble: 6 × 4 ## Filespeakerid Sex Word.count Texttype ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 &lt;S1A-002$A&gt; female 391 PrivateDialoge ## 2 &lt;S1A-002$B&gt; female 47 PrivateDialoge ## 3 &lt;S1A-002$C&gt; male 200 PrivateDialoge ## 4 &lt;S1A-002$D&gt; female 464 PrivateDialoge ## 5 &lt;S1A-002$E&gt; male 639 PrivateDialoge ## 6 &lt;S1A-002$F&gt; female 308 PrivateDialoge 2.5.13 If-statements We should briefly talk about if-statements (or case_when in the present case). The case_when function is both very powerful and extremely helpful as it allows you to assign values based on a test. As such, case_when-statements can be read as: When/If X is the case, then do A and if X is not the case do B! (When/If -&gt; Then -&gt; Else) The nice thing about ifelse or case_when-statements is that they can be used in succession as we have done above. This can then be read as: If X is the case, then do A, if Y is the case, then do B, else do Z EXERCISE TIME! ` 1.Using the data called icebio, create a new data set called ICE_Ire_AgeGroup in which you create a column called AgeGroup where all speakers who are younger than 42 have the value young and all speakers aged 42 and over old. Tip: use if-statements to assign the old and young values. Answer ICE_Ire_AgeGroup &lt;- icebio %&gt;% dplyr::mutate(AgeGroup = dplyr::case_when(age == &quot;42-49&quot; ~ &quot;old&quot;, age == &quot;50+&quot; ~ &quot;old&quot;, age == &quot;0-18&quot; ~ &quot;young&quot;, age == &quot;19-25&quot; ~ &quot;young&quot;, age == &quot;26-33&quot; ~ &quot;young&quot;, age == &quot;34-41&quot; ~ &quot;young&quot;, TRUE ~age)) # inspect data head(ICE_Ire_AgeGroup); table(ICE_Ire_AgeGroup$AgeGroup) ## # A tibble: 6 × 10 ## id file.speaker.id text.id spk.ref zone date sex age word.count ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 &lt;S1A-001$A&gt; S1A-001 A northern i… 1990… male 34-41 765 ## 2 2 &lt;S1A-001$B&gt; S1A-001 B northern i… 1990… fema… 34-41 1298 ## 3 3 &lt;S1A-002$?&gt; S1A-002 ? NA NA NA NA 23 ## 4 4 &lt;S1A-002$A&gt; S1A-002 A northern i… 2002… fema… 26-33 391 ## 5 5 &lt;S1A-002$B&gt; S1A-002 B northern i… 2002… fema… 19-25 47 ## 6 6 &lt;S1A-002$C&gt; S1A-002 C northern i… 2002… male 50+ 200 ## # ℹ 1 more variable: AgeGroup &lt;chr&gt; ## ## NA old young ## 547 333 452 ` 2.5.14 Summarizing data Summarizing is really helpful and can be done using the summarise function. icebio_summary1 &lt;- icebio_texttype %&gt;% dplyr::summarise(Words = sum(Word.count)) # inspect data head(icebio_summary1) ## # A tibble: 1 × 1 ## Words ## &lt;dbl&gt; ## 1 141876 To get summaries of sub-groups or by variable level, we can use the group_by function and then use the summarise function. icebio_summary2 &lt;- icebio_texttype %&gt;% dplyr::group_by(Texttype, Sex) %&gt;% dplyr::summarise(Speakers = n(), Words = sum(Word.count)) # inspect data head(icebio_summary2) ## # A tibble: 6 × 4 ## # Groups: Texttype [3] ## Texttype Sex Speakers Words ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 PrivateDialoge female 105 60024 ## 2 PrivateDialoge male 18 9628 ## 3 PublicDialogue female 63 24647 ## 4 PublicDialogue male 41 16783 ## 5 UnscriptedMonologue female 3 6712 ## 6 UnscriptedMonologue male 16 24082 EXERCISE TIME! ` Use the icebio and determine the number of words uttered by female speakers from Northern Ireland above an age of 50. Answer words_fni50 &lt;- icebio %&gt;% dplyr::select(zone, sex, age, word.count) %&gt;% dplyr::group_by(zone, sex, age) %&gt;% dplyr::summarize(Words = sum(word.count)) %&gt;% dplyr::filter(sex == &quot;female&quot;, age == &quot;50+&quot;, zone == &quot;northern ireland&quot;) ## `summarise()` has grouped output by &#39;zone&#39;, &#39;sex&#39;. You can override using the ## `.groups` argument. # inspect data words_fni50 ## # A tibble: 1 × 4 ## # Groups: zone, sex [1] ## zone sex age Words ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 northern ireland female 50+ 23210 Load the file exercisedata.txt and determine the mean scores of groups A and B. Tip: to extract the mean, combine the summary function with the mean function. Answer exercisedata &lt;- read.delim(here::here(&quot;data&quot;, &quot;exercisedata.txt&quot;), sep = &quot;\\t&quot;, header = T) %&gt;% dplyr::group_by(Group) %&gt;% dplyr::summarize(Mean = mean(Score)) # inspect data exercisedata ## # A tibble: 2 × 2 ## Group Mean ## &lt;chr&gt; &lt;dbl&gt; ## 1 A 14.9 ## 2 B 11.8 ` 2.5.15 Gathering and spreading data The tidyr package has two very useful functions for gathering and spreading data that can be sued to transform data to long and wide formats (you will see what this means below). The functions are called gather and spread. We will use the data set called icebio_summary2, which we created above, to demonstrate how this works. We will first check out the spread-function to create different columns for women and men that show how many of them are represented in the different text types. icebio_summary_wide &lt;- icebio_summary2 %&gt;% dplyr::select(-Words) %&gt;% tidyr::spread(Sex, Speakers) # inspect icebio_summary_wide ## # A tibble: 3 × 3 ## # Groups: Texttype [3] ## Texttype female male ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 PrivateDialoge 105 18 ## 2 PublicDialogue 63 41 ## 3 UnscriptedMonologue 3 16 The data is now in what is called a wide-format as values are distributed across columns. To reformat this back to a long-format where each column represents exactly one variable, we use the gather-function: icebio_summary_long &lt;- icebio_summary_wide %&gt;% tidyr::gather(Sex, Speakers, female:male) # inspect icebio_summary_long ## # A tibble: 6 × 3 ## # Groups: Texttype [3] ## Texttype Sex Speakers ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 PrivateDialoge female 105 ## 2 PublicDialogue female 63 ## 3 UnscriptedMonologue female 3 ## 4 PrivateDialoge male 18 ## 5 PublicDialogue male 41 ## 6 UnscriptedMonologue male 16 2.6 More on working with text We have now worked though how to load, save, and edit tabulated data. However, R is also perfectly equipped for working with textual data which is what we going to concentrate on now. 2.6.1 Loading text data To load text data from the web, we can use the read_file function which takes the URL of the text as its first argument. In this case will will load the 2016 rally speeches Donald Trump. Trump &lt;-base::readRDS(url(&quot;https://slcladal.github.io/data/Trump.rda&quot;, &quot;rb&quot;)) # inspect data str(Trump) ## &#39;data.frame&#39;: 2694 obs. of 1 variable: ## $ SPEECH: chr &quot;...Thank you so much. That&#39;s so nice. Isn&#39;t he a great guy. He doesn&#39;t get a fair press; he doesn&#39;t get it. &quot;| __truncated__ &quot;With that said, our country is really headed in the wrong direction with a president who is doing an absolutely&quot;| __truncated__ &quot;And I&#39;m a conservative, actually very conservative, and I&#39;m a Republican. And I&#39;m very disappointed by our Rep&quot;| __truncated__ &quot;You look at Obamacare. A total catastrophe and by the way it really kicks in in &#39;16 and it is going to be a di&quot;| __truncated__ ... It is very easy to extract frequency information and to create frequency lists. We can do this by first using the unnest_tokens function which splits texts into individual words, an then use the count function to get the raw frequencies of all word types in a text. Trump %&gt;% tibble(text = SPEECH) %&gt;% unnest_tokens(word, text) %&gt;% dplyr::count(word, sort=T) ## # A tibble: 6,102 × 2 ## word n ## &lt;chr&gt; &lt;int&gt; ## 1 the 5924 ## 2 to 5460 ## 3 and 5438 ## 4 i 4873 ## 5 a 3592 ## 6 you 3055 ## 7 of 2953 ## 8 we 2565 ## 9 it 2421 ## 10 that 2317 ## # ℹ 6,092 more rows Extracting N-grams is also very easy as the unnest_tokens function can an argument called token in which we can specify that we want to extract n-grams, If we do this, then we need to specify the n as a separate argument. Below we specify that we want the frequencies of all 4-grams. Trump %&gt;% tibble(text = SPEECH) %&gt;% unnest_tokens(word, text, token=&quot;ngrams&quot;, n=4) %&gt;% dplyr::count(word, sort=T) %&gt;% head(10) ## # A tibble: 10 × 2 ## word n ## &lt;chr&gt; &lt;int&gt; ## 1 and we’re going to 93 ## 2 we are going to 75 ## 3 &lt;NA&gt; 68 ## 4 it’s going to be 65 ## 5 we’re going to do 61 ## 6 we’re going to have 61 ## 7 not going to happen 60 ## 8 and by the way 53 ## 9 thank you very much 52 ## 10 we’re going to win 50 2.6.2 Splitting-up texts We can use the str_split function to split texts. However, there are two issues when using this (very useful) function: the pattern that we want to split on disappears the output is a list (a special type of data format) To remedy these issues, we combine the str_split function with the unlist function add something right at the beginning of the pattern that we use to split the text. To add something to the beginning of the pattern that we want to split the text by, we use the str_replace_all function. The str_replace_all function takes three arguments, 1. the text, 2. the pattern that should be replaced, 3. the replacement. In the example below, we add ~~~ to the sequence SPEECH and then split on the ~~~ rather than on the sequence “SPEECH” (in other words, we replace SPEECH with ~~~SPEECH and then split on ~~~). Trump_split &lt;- unlist(str_split( stringr::str_replace_all(Trump, &quot;SPEECH&quot;, &quot;~~~SPEECH&quot;), pattern = &quot;~~~&quot;)) # inspect data nchar(Trump_split)#; str(Trump_split) ## [1] 21311 26963 2701 6004 1342 32880 28497 425099 1404 311770 ## [11] 43776 2.6.3 Cleaning texts When working with texts, we usually need to clean the data. Below, we do some very basic cleaning using a pipeline. Trump_split_clean &lt;- Trump_split %&gt;% # replace elements stringr::str_replace_all(fixed(&quot;\\n&quot;), &quot; &quot;) %&gt;% # remove strange symbols stringr::str_replace_all(&quot;[^[:alnum:][:punct:]]+&quot;, &quot; &quot;) %&gt;% # combine contractions stringr::str_replace_all(&quot; re &quot;, &quot;&#39;re &quot;) %&gt;% stringr::str_replace_all(&quot; ll &quot;, &quot;&#39;ll &quot;) %&gt;% stringr::str_replace_all(&quot; d &quot;, &quot;&#39;d &quot;) %&gt;% stringr::str_replace_all(&quot; m &quot;, &quot;&#39;m &quot;) %&gt;% stringr::str_replace_all(&quot; s &quot;, &quot;&#39;s &quot;) %&gt;% stringr::str_replace_all(&quot;n t &quot;, &quot;n&#39;t &quot;) %&gt;% # remove \\&quot; stringr::str_remove_all(&quot;\\&quot;&quot;) %&gt;% # remove superfluous white spaces stringr::str_squish() # remove very short elements Trump_split_clean &lt;- Trump_split_clean[nchar(Trump_split_clean) &gt; 5] # inspect data nchar(Trump_split_clean) ## [1] 20878 26754 2687 5960 1321 32539 28303 422165 1404 309275 ## [11] 43477 Inspect text Trump_split_clean[5] 2.6.4 Concordancing and KWICs Creating concordances or key-word-in-context displays is one of the most common practices when dealing with text data. Fortunately, there exist ready-made functions that make this a very easy task in R. We will use the kwic function from the quanteda package to create kwics here. kwic_multiple &lt;- quanteda::kwic(Trump_split_clean, pattern = phrase(&quot;great again&quot;), window = 3, valuetype = &quot;regex&quot;) %&gt;% as.data.frame() # inspect data head(kwic_multiple) ## docname from to pre keyword post pattern ## 1 text1 3043 3044 make our country great again . We have great again ## 2 text1 4457 4458 to make America great again . We can great again ## 3 text1 4465 4466 make this country great again . The potential great again ## 4 text2 5329 5330 will make America great again . And if great again ## 5 text4 619 620 to make America great again , folks , great again ## 6 text4 634 635 to make America great again . , And great again We can now also select concordances based on specific features. For example, we only want those instances of “great again” if the preceding word was “america”. kwic_multiple_select &lt;- kwic_multiple %&gt;% # last element before search term is &quot;america&quot; dplyr::filter(str_detect(pre, &quot;america$&quot;)) # inspect data head(kwic_multiple_select) ## [1] docname from to pre keyword post pattern ## &lt;0 rows&gt; (or 0-length row.names) Again, we can use the write.table function to save our kwics to disc. write.table(kwic_multiple_select, here::here(&quot;data&quot;, &quot;kwic_multiple_select.txt&quot;), sep = &quot;\\t&quot;) As most of the data that we use is on out computers (rather than being somewhere on the web), we now load files with text from your computer. It is important to note that you need to use \\\\ when you want to load data from a Windows PC (rather than single \\). To load many files, we first create a list of all files in a the directory that we want to load data from and then use the sapply function (which works just like a loop). The sapply function takes a a vector of elements and then performs a sequence of steps on each of these elements. In the example below, we feed the file locations to the sapply function and then we scan each text (i.e. we read it into R), then we paste all the content of one file together. NOTEYou may have to change the path to the data! files &lt;- list.files(here::here(&quot;data&quot;, &quot;ICEIrelandSample&quot;), pattern = &quot;.txt&quot;, full.names = T) ICE_Ire_sample &lt;- sapply(files, function(x) { x &lt;- scan(x, what = &quot;char&quot;) x &lt;- paste(x, sep = &quot; &quot;, collapse = &quot; &quot;) }) # inspect data str(ICE_Ire_sample) ## Named chr [1:100] &quot;&lt;S1A-001 Riding&gt; &lt;I&gt; &lt;S1A-001$A&gt; &lt;#&gt; Well how did the riding go tonight &lt;S1A-001$B&gt; &lt;#&gt; It was good so it was &lt;#&gt; Just I I coul ... ## - attr(*, &quot;names&quot;)= chr [1:100] &quot;F:/data recovery/Uni/UQ/SLC/LADAL/workshops/IntroR_WS/data/ICEIrelandSample/S1A-001.txt&quot; &quot;F:/data recovery/Uni/UQ/SLC/LADAL/workshops/IntroR_WS/data/ICEIrelandSample/S1A-002.txt&quot; &quot;F:/data recovery/Uni/UQ/SLC/LADAL/workshops/IntroR_WS/data/ICEIrelandSample/S1A-003.txt&quot; &quot;F:/data recovery/Uni/UQ/SLC/LADAL/workshops/IntroR_WS/data/ICEIrelandSample/S1A-004.txt&quot; ... As the texts do not have column names (but simply names), we can clean these by removing everything before a / and by removing the .txt. names(ICE_Ire_sample) &lt;- names(ICE_Ire_sample) %&gt;% stringr::str_remove_all(&quot;.*/&quot;) %&gt;% stringr::str_remove_all(&quot;.txt&quot;) # inspect names(ICE_Ire_sample) ## [1] &quot;S1A-001&quot; &quot;S1A-002&quot; ## [3] &quot;S1A-003&quot; &quot;S1A-004&quot; ## [5] &quot;S1A-005&quot; &quot;S1A-006&quot; ## [7] &quot;S1A-007&quot; &quot;S1A-008&quot; ## [9] &quot;S1A-009&quot; &quot;S1A-010&quot; ## [11] &quot;S1A-011&quot; &quot;S1A-012&quot; ## [13] &quot;S1A-013&quot; &quot;S1A-014&quot; ## [15] &quot;S1A-015&quot; &quot;S1A-016&quot; ## [17] &quot;S1A-017&quot; &quot;S1A-018&quot; ## [19] &quot;S1A-019&quot; &quot;S1A-020&quot; ## [21] &quot;S1A-021&quot; &quot;S1A-022&quot; ## [23] &quot;S1A-023&quot; &quot;S1A-024&quot; ## [25] &quot;S1A-025&quot; &quot;S1A-026&quot; ## [27] &quot;S1A-027&quot; &quot;S1A-028&quot; ## [29] &quot;S1A-029&quot; &quot;S1A-030&quot; ## [31] &quot;S1A-031&quot; &quot;S1A-032&quot; ## [33] &quot;S1A-033&quot; &quot;S1A-034&quot; ## [35] &quot;S1A-035&quot; &quot;S1A-036&quot; ## [37] &quot;S1A-037&quot; &quot;S1A-038&quot; ## [39] &quot;S1A-039&quot; &quot;S1A-040&quot; ## [41] &quot;S1A-041&quot; &quot;S1A-042&quot; ## [43] &quot;S1A-043&quot; &quot;S1A-044&quot; ## [45] &quot;S1A-045&quot; &quot;S1A-046&quot; ## [47] &quot;S1A-047&quot; &quot;S1A-048&quot; ## [49] &quot;S1A-049&quot; &quot;S1A-050&quot; ## [51] &quot;S1A-051&quot; &quot;S1A-052 Buttermilk&quot; ## [53] &quot;S1A-053 Student grants 1&quot; &quot;S1A-054 Student grants 2&quot; ## [55] &quot;S1A-055 Hospitals&quot; &quot;S1A-056 Holistic medicine 1&quot; ## [57] &quot;S1A-057 Studying 2&quot; &quot;S1A-058 Holistic medicine 2&quot; ## [59] &quot;S1A-059 Glasses 1&quot; &quot;S1A-060 Glasses 2&quot; ## [61] &quot;S1A-061 Modern man&quot; &quot;S1A-062 America trip 1&quot; ## [63] &quot;S1A-063 Shoes&quot; &quot;S1A-064 O&#39;Connell Street&quot; ## [65] &quot;S1A-065 America trip 2&quot; &quot;S1A-066 Radio music&quot; ## [67] &quot;S1A-067 Apprenticeship&quot; &quot;S1A-068 Rock bands&quot; ## [69] &quot;S1A-069 Christmas trees&quot; &quot;S1A-070 Friends&quot; ## [71] &quot;S1A-071 Elocution&quot; &quot;S1A-072 Driver&#39;s licence&quot; ## [73] &quot;S1A-073 Politics&quot; &quot;S1A-074 Local shops&quot; ## [75] &quot;S1A-075 Present&quot; &quot;S1A-076 Boyfriends 2&quot; ## [77] &quot;S1A-077 Books&quot; &quot;S1A-078 Medical project&quot; ## [79] &quot;S1A-079 Driving&quot; &quot;S1A-080 Motorbikes&quot; ## [81] &quot;S1A-081 Croke Park&quot; &quot;S1A-082 Kissogram&quot; ## [83] &quot;S1A-083 Donkey story&quot; &quot;S1A-084 General election&quot; ## [85] &quot;S1A-085 Birthday cake&quot; &quot;S1A-086 Baby&quot; ## [87] &quot;S1A-087 Line dancing&quot; &quot;S1A-088 Therapy inaugural&quot; ## [89] &quot;S1A-089 American men&quot; &quot;S1A-090 Designer clothes&quot; ## [91] &quot;S1A-091 Haircut - Mortgage&quot; &quot;S1A-092 Househunting&quot; ## [93] &quot;S1A-093 Motorbikes&quot; &quot;S1A-094 Health&quot; ## [95] &quot;S1A-095 Strep infection&quot; &quot;S1A-096 Sisters 1&quot; ## [97] &quot;S1A-097 Sisters 2&quot; &quot;S1A-098 Bad weather&quot; ## [99] &quot;S1A-099 Dresses&quot; &quot;S1A-100 College plans&quot; 2.6.5 Further splitting of texts To split the texts into speech units where each speech unit begins with the speaker that has uttered it, we again use the sapply function. ICE_Ire_split &lt;- as.vector(unlist(sapply(ICE_Ire_sample, function(x){ x &lt;- as.vector(str_split(str_replace_all(x, &quot;(&lt;S1A-)&quot;, &quot;~~~\\\\1&quot;), &quot;~~~&quot;)) }))) # inspect head(ICE_Ire_split) ## [1] &quot;&quot; ## [2] &quot;&lt;S1A-001 Riding&gt; &lt;I&gt; &quot; ## [3] &quot;&lt;S1A-001$A&gt; &lt;#&gt; Well how did the riding go tonight &quot; ## [4] &quot;&lt;S1A-001$B&gt; &lt;#&gt; It was good so it was &lt;#&gt; Just I I couldn&#39;t believe that she was going to let me jump &lt;,&gt; that was only the fourth time you know &lt;#&gt; It was great &lt;&amp;&gt; laughter &lt;/&amp;&gt; &quot; ## [5] &quot;&lt;S1A-001$A&gt; &lt;#&gt; What did you call your horse &quot; ## [6] &quot;&lt;S1A-001$B&gt; &lt;#&gt; I can&#39;t remember &lt;#&gt; Oh Mary s Town &lt;,&gt; oh\\n&quot; 2.6.6 Basics of regular expressions Next, we extract the File and the Speaker and combine Text, File, and Speaker in a table. We use this to show the power of regular expressions (to learn more about regular expression, have a look at this very recommendable tutorial). Regular expressions are symbols or sequences of symbols that stand for symbols or patterns (e.g. [a-z] stands for any lowercase character) the frequency of symbols or patterns (e.g. {1,3} stands for between 1 and 3) classes of symbols (e.g. [:punct:] stands for any punctuation symbol) structural properties (e.g. [^[:blank:]] stands for any non-space character, \\t stands for tab-stop and \\n stands for a line break) We can not go into any detail here and only touch upon the power of regular expressions. The symbol . is one of the most powerful and most universal regular expressions as it represents (literally) any symbol or character and it thus stands for a pattern. The * is a regular expression that refers to the frequency of a pattern and it stands for 0 to an infinite number of instances. Thus, .* stands for 0 to an infinite number of any character. You can find an overview of the regular expressions that you can use in R here. Also, if you put patterns in round brackets, R will remember the sequence within brackets and you can paste it back into a string from memory when you replace something. When referring to symbols that are used a regular expressions such as \\ or \\$, you need to inform R that you actually mean the real symbol and not the regular expression and you do that by typing two \\\\ before the sequence in question. Have a look at the example below and try to see what the regular expressions (.*(S1A-[0-9]{3,3}).*, \\n, and .*\\\\$([A-Z]{1,2}\\\\?{0,1})&gt;.*) stand for. ICE_Ire_split_tb &lt;- ICE_Ire_split %&gt;% as.data.frame() # add column names colnames(ICE_Ire_split_tb)[1] &lt;- &quot;Text&quot; # add file and speaker ICE_Ire_split_tb &lt;- ICE_Ire_split_tb %&gt;% dplyr::filter(!str_detect(Text, &quot;&lt;I&gt;&quot;), Text != &quot;&quot;) %&gt;% dplyr::mutate(File = str_replace_all(Text, &quot;.*(S1A-[0-9]{3,3}).*&quot;, &quot;\\\\1&quot;), File = str_remove_all(File, &quot;\\\\\\n&quot;), Speaker = str_replace_all(Text, &quot;.*\\\\$([A-Z]{1,2}\\\\?{0,1})&gt;.*&quot;, &quot;\\\\1&quot;), Speaker = str_remove_all(Speaker, &quot;\\\\\\n&quot;)) .cl-a2475856{table-layout:auto;width:95%;}.cl-a23d127e{font-family:'Arial';font-size:12pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-a23d1292{font-family:'Arial';font-size:12pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-a2406c3a{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-a240858a{background-color:rgba(207, 207, 207, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2408594{background-color:rgba(207, 207, 207, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2408595{background-color:rgba(207, 207, 207, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a240859e{background-color:rgba(239, 239, 239, 1.00);vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a240859f{background-color:rgba(239, 239, 239, 1.00);vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a24085a8{background-color:rgba(239, 239, 239, 1.00);vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a24085a9{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a24085aa{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a24085b2{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a24085b3{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a24085bc{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a24085bd{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} Table 2.1: TextFileSpeaker&lt;S1A-001$A&gt; &lt;#&gt; Well how did the riding go tonight S1A-001A&lt;S1A-001$B&gt; &lt;#&gt; It was good so it was &lt;#&gt; Just I I couldn't believe that she was going to let me jump &lt;,&gt; that was only the fourth time you know &lt;#&gt; It was great &lt;&amp;&gt; laughter &lt;/&amp;&gt; S1A-001B&lt;S1A-001$A&gt; &lt;#&gt; What did you call your horse S1A-001A&lt;S1A-001$B&gt; &lt;#&gt; I can't remember &lt;#&gt; Oh Mary s Town &lt;,&gt; ohS1A-001B&lt;S1A-001$A&gt; &lt;#&gt; And how did Mabel doS1A-001A&lt;S1A-001$B&gt; &lt;#&gt; Did you not see her whenever she was going over the jumps &lt;#&gt; There was one time her horse refused and it refused three times &lt;#&gt; And then &lt;,&gt; she got it round and she just lined it up straight and she just kicked it and she hit it with the whip &lt;,&gt; and over it went the last time you know &lt;#&gt; And Stephanie told her she was very determined and very well-ridden &lt;&amp;&gt; laughter &lt;/&amp;&gt; because it had refused the other times you know &lt;#&gt; But Stephanie wouldn t let her give up on it &lt;#&gt; She made her keep coming back and keep coming back &lt;,&gt; until &lt;,&gt; it jumped it you know &lt;#&gt; It was good S1A-001B&lt;S1A-001$A&gt; &lt;#&gt; Yeah I m not so sure her jumping s improving that much &lt;#&gt; She uh &lt;,&gt; seemed to be holding the reins very tight S1A-001A&lt;S1A-001$B&gt; &lt;#&gt; Yeah she was &lt;#&gt; That s what Stephanie said &lt;#&gt; &lt;{&gt; &lt;[&gt; She &lt;/[&gt; needed to &lt;,&gt; give the horse its headS1A-001B&lt;S1A-001$A&gt; &lt;#&gt; &lt;[&gt; Mm &lt;/[&gt; &lt;/{&gt;S1A-001A&lt;S1A-001$A&gt; &lt;#&gt; She wasn t really getting into the jumping position the way she used to S1A-001A 2.6.7 Combining tables We often want to combine different tables. This is very easy in R and we will show how it can be done by combining our bio data about speakers that are represented in the ICE Ireland corpus with the texts themselves so that we get a table which holds both the text as well as the speaker information. Thus, we now join the text data with the bio data by using the left_join function. We join the text with the bio data based on the contents of the File and the Speaker columns. In contract to right_join, and full_join, left_join will drop all rows from the right table that are not present in left table (and vice verse for right_join. In contrast, full_join will retain all rows from both the left and the right table. ICE_Ire &lt;- dplyr::left_join(ICE_Ire_split_tb, icebio_edit, by = c(&quot;File&quot;, &quot;Speaker&quot;)) .cl-a27db626{table-layout:auto;width:95%;}.cl-a272699c{font-family:'Arial';font-size:12pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-a27269b0{font-family:'Arial';font-size:12pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-a2784c22{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-a2784c2c{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-a2786572{background-color:rgba(207, 207, 207, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a278657c{background-color:rgba(207, 207, 207, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a278657d{background-color:rgba(207, 207, 207, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2786586{background-color:rgba(207, 207, 207, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2786587{background-color:rgba(239, 239, 239, 1.00);vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2786588{background-color:rgba(239, 239, 239, 1.00);vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2786590{background-color:rgba(239, 239, 239, 1.00);vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2786591{background-color:rgba(239, 239, 239, 1.00);vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2786592{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2786593{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a278659a{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a278659b{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a278659c{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a27865a4{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a27865a5{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a27865a6{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} Table 2.2: TextFileSpeakerIdFilespeakeridZoneDateSexAgeWord.count&lt;S1A-001$A&gt; &lt;#&gt; Well how did the riding go tonight S1A-001A1&lt;S1A-001$A&gt;northern ireland1990-1994male34-41765&lt;S1A-001$B&gt; &lt;#&gt; It was good so it was &lt;#&gt; Just I I couldn't believe that she was going to let me jump &lt;,&gt; that was only the fourth time you know &lt;#&gt; It was great &lt;&amp;&gt; laughter &lt;/&amp;&gt; S1A-001B2&lt;S1A-001$B&gt;northern ireland1990-1994female34-411,298&lt;S1A-001$A&gt; &lt;#&gt; What did you call your horse S1A-001A1&lt;S1A-001$A&gt;northern ireland1990-1994male34-41765&lt;S1A-001$B&gt; &lt;#&gt; I can't remember &lt;#&gt; Oh Mary s Town &lt;,&gt; ohS1A-001B2&lt;S1A-001$B&gt;northern ireland1990-1994female34-411,298&lt;S1A-001$A&gt; &lt;#&gt; And how did Mabel doS1A-001A1&lt;S1A-001$A&gt;northern ireland1990-1994male34-41765&lt;S1A-001$B&gt; &lt;#&gt; Did you not see her whenever she was going over the jumps &lt;#&gt; There was one time her horse refused and it refused three times &lt;#&gt; And then &lt;,&gt; she got it round and she just lined it up straight and she just kicked it and she hit it with the whip &lt;,&gt; and over it went the last time you know &lt;#&gt; And Stephanie told her she was very determined and very well-ridden &lt;&amp;&gt; laughter &lt;/&amp;&gt; because it had refused the other times you know &lt;#&gt; But Stephanie wouldn t let her give up on it &lt;#&gt; She made her keep coming back and keep coming back &lt;,&gt; until &lt;,&gt; it jumped it you know &lt;#&gt; It was good S1A-001B2&lt;S1A-001$B&gt;northern ireland1990-1994female34-411,298&lt;S1A-001$A&gt; &lt;#&gt; Yeah I m not so sure her jumping s improving that much &lt;#&gt; She uh &lt;,&gt; seemed to be holding the reins very tight S1A-001A1&lt;S1A-001$A&gt;northern ireland1990-1994male34-41765&lt;S1A-001$B&gt; &lt;#&gt; Yeah she was &lt;#&gt; That s what Stephanie said &lt;#&gt; &lt;{&gt; &lt;[&gt; She &lt;/[&gt; needed to &lt;,&gt; give the horse its headS1A-001B2&lt;S1A-001$B&gt;northern ireland1990-1994female34-411,298&lt;S1A-001$A&gt; &lt;#&gt; &lt;[&gt; Mm &lt;/[&gt; &lt;/{&gt;S1A-001A1&lt;S1A-001$A&gt;northern ireland1990-1994male34-41765&lt;S1A-001$A&gt; &lt;#&gt; She wasn t really getting into the jumping position the way she used to S1A-001A1&lt;S1A-001$A&gt;northern ireland1990-1994male34-41765 You can then perform concordancing on the Text column in the table. kwic_iceire &lt;- quanteda::kwic(ICE_Ire$Text, pattern = phrase(&quot;Irish&quot;), window = 5, valuetype = &quot;regex&quot;) %&gt;% as.data.frame() .cl-a2db45e8{table-layout:auto;width:95%;}.cl-a2d0f3cc{font-family:'Arial';font-size:12pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-a2d0f3e0{font-family:'Arial';font-size:12pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-a2d4cb00{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-a2d4cb14{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-a2d4e87e{background-color:rgba(207, 207, 207, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2d4e888{background-color:rgba(207, 207, 207, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2d4e892{background-color:rgba(207, 207, 207, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2d4e893{background-color:rgba(207, 207, 207, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2d4e89c{background-color:rgba(239, 239, 239, 1.00);vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2d4e89d{background-color:rgba(239, 239, 239, 1.00);vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2d4e8a6{background-color:rgba(239, 239, 239, 1.00);vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2d4e8b0{background-color:rgba(239, 239, 239, 1.00);vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2d4e8ba{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2d4e8c4{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2d4e8c5{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2d4e8ce{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2d4e8cf{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2d4e8d8{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2d4e8d9{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a2d4e8e2{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} Table 2.3: docnamefromtoprekeywordpostpatterntext14303737Ireland you know it wasIrishbacon and it was lovelyIrishtext17606262/ &amp; &gt; being goodIrishCatholics we always had toIrishtext17841313&gt; We should do theIrish&lt; . &gt; ver &lt;Irishtext17842323&lt; / . &gt; theIrishversion of the Matrix &lt;Irishtext60632222tickets for it in theIrishNews &lt; # &gt; IIrishtext85831111&lt; # &gt; &lt; &amp;Irish&gt; &lt; [ &gt; NiIrishtext85834545ni / &lt; / &amp;Irish&gt;Irishtext90301818[ &gt; Yeah and BaileysIrishCream cake &lt; / [Irishtext103874141&lt; [ &gt; &lt; &amp;Irish&gt; Scoil San Treasa &lt;Irishtext103874949San Treasa &lt; / &amp;Irish&gt; &lt; / [ &gt;Irish 2.6.8 Tokenization and counting words We will now use the tokenize_words function from the tokenizer package to find out how many words are in each file. Before we count the words, however, we will clean the data by removing everything between pointy brackets (e.g. &lt;#&gt;) as well as all punctuation. words &lt;- as.vector(sapply(Trump_split_clean, function(x){ x &lt;- tm::removeNumbers(x) x &lt;- tm::removePunctuation(x) x &lt;- unlist(tokenize_words(x)) x &lt;- length(x)})) words ## [1] 3846 4641 521 1119 241 5880 5301 76772 266 56940 7848 The nice thing about the tokenizer package is that it also allows to split texts into sentences. To show this, we return to the rally speeches by Donald Trump and split the first of his rally speeches into sentences. Sentences &lt;- unlist(tokenize_sentences(Trump_split_clean[6])) # inspect head(Sentences) ## [1] &quot;SPEECH 6, Thank you.&quot; ## [2] &quot;It’s true, and these are the best and the finest.&quot; ## [3] &quot;When Mexico sends its people, they’re not sending their best.&quot; ## [4] &quot;They’re not sending you.&quot; ## [5] &quot;They’re not sending you.&quot; ## [6] &quot;They’re sending people that have lots of problems, and they’re bringing those problems with us.&quot; We now want to find associations between words. To do this, we convert all characters to lower case, remove (some) non lexical words (also called stop words), remove punctuation, and superfluous white spaces and then create a document-term-matrix (DTM) which shows how often any word occurs in any of the sentences (in this case, the sentences are treated as documents). Once we have a DTM, we can then use the findAssocs function to see which words associate most strongly with target words that we want to investigate. We can use the argument “corlimit” to show the terms that are most strongly associated with our target words. # clean sentences Sentences &lt;- Sentences %&gt;% # convert to lowercase tolower() %&gt;% # remove stop words tm::removeWords(stopwords(&quot;english&quot;)) %&gt;% # remove punctuation tm::removePunctuation() %&gt;% # remove numbers tm::removeNumbers() %&gt;% # remove superfluous white spaces stringr::str_squish() # create DTM DTM &lt;- DocumentTermMatrix(VCorpus(VectorSource(Sentences))) findAssocs(DTM, c(&quot;problems&quot;, &quot;america&quot;), corlimit = c(.5, .5)) ## $problems ## brilliantly devalue obligation russia buy everything ## 0.67 0.67 0.67 0.67 0.50 0.50 ## ## $america ## americas avenue bank ## 0.71 0.57 0.57 We now turn to data visualization basics. 2.7 Working with figures There are numerous function in R that we can use to visualize data. We will use the ggplot function from the ggplot2 package here to visualize the data. The ggplot2 package was developed by Hadley Wickham in 2005 and it implements the graphics scheme described in the book The Grammar of Graphics by Leland Wilkinson. The idea behind the Grammar of Graphics can be boiled down to 5 bullet points (see Wickham 2016: 4): a statistical graphic is a mapping from data to aesthetic attributes (location, color, shape, size) of geometric objects (points, lines, bars). the geometric objects are drawn in a specific coordinate system. scales control the mapping from data to aesthetics and provide tools to read the plot (i.e., axes and legends). the plot may also contain statistical transformations of the data (means, medians, bins of data, trend lines). faceting can be used to generate the same plot for different subsets of the data. 2.7.1 Basics of ggplot2 syntax Specify data, aesthetics and geometric shapes ggplot(data, aes(x=, y=, color=, shape=, size=)) + geom_point(), or geom_histogram(), or geom_boxplot(), etc. This combination is very effective for exploratory graphs. The data must be a data frame. The aes() function maps columns of the data frame to aesthetic properties of geometric shapes to be plotted. ggplot() defines the plot; the geoms show the data; each component is added with + Some examples should make this clear 2.7.2 Practical examples We will now create some basic visualizations or plots. Before we start plotting, we will create data that we want to plot. In this case, we will extract the mean word counts by gender and age. plotdata &lt;- ICE_Ire %&gt;% # only private dialogue dplyr::filter(stringr::str_detect(File, &quot;S1A&quot;), # without speaker younger than 19 Age != &quot;0-18&quot;, Age != &quot;NA&quot;) %&gt;% dplyr::group_by(Sex, Age) %&gt;% dplyr::summarise(Words = mean(Word.count)) # inspect head(plotdata) ## # A tibble: 6 × 3 ## # Groups: Sex [2] ## Sex Age Words ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 female 19-25 700. ## 2 female 26-33 680. ## 3 female 34-41 691. ## 4 female 42-49 572. ## 5 female 50+ 721. ## 6 male 19-25 677. In the example below, we specify that we want to visualize the plotdata and that the x-axis should represent Age and the y-axis Words(the mean frequency of words). We also tell R that we want to group the data by Sex (i.e. that we want to distinguish between men and women). Then, we add geom_line which tells R that we want a line graph. The result of this is shown below. ggplot(plotdata, aes(x = Age, y = Words, color = Sex, group = Sex)) + geom_line() Once you have a basic plot like the one above, you can prettify the plot. For example, you can change the width of the lines (size = 1.25) change the y-axis limits (coord_cartesian(ylim = c(0, 1000))) use a different theme (theme_bw() means black and white theme) move the legend to the top change the default colors to colors you like (*scale_color_manual …`) change the linetype (scale_linetype_manual ...) ggplot(plotdata, aes(x = Age, y = Words, color = Sex, group = Sex, linetype = Sex)) + geom_line(size = 1.25) + coord_cartesian(ylim = c(0, 1500)) + theme_bw() + theme(legend.position = &quot;top&quot;) + scale_color_manual(breaks = c(&quot;female&quot;, &quot;male&quot;), values = c(&quot;gray20&quot;, &quot;gray50&quot;)) + scale_linetype_manual(breaks = c(&quot;female&quot;, &quot;male&quot;), values = c(&quot;solid&quot;, &quot;dotted&quot;)) An additional and very handy feature of this way of producing graphs is that you can integrate them into pipes can easily combine plots. ICE_Ire %&gt;% dplyr::filter(Sex != &quot;NA&quot;, Age != &quot;NA&quot;, is.na(Sex) == F, is.na(Age) == F) %&gt;% dplyr::mutate(Age = factor(Age), Sex = factor(Sex)) %&gt;% ggplot(aes(x = Age, y = Word.count, color = Sex, linetype = Sex)) + geom_point() + stat_summary(fun=mean, geom=&quot;line&quot;, aes(group=Sex)) + coord_cartesian(ylim = c(0, 2000)) + theme_bw() + theme(legend.position = &quot;top&quot;) + scale_color_manual(breaks = c(&quot;female&quot;, &quot;male&quot;), values = c(&quot;indianred&quot;, &quot;darkblue&quot;)) + scale_linetype_manual(breaks = c(&quot;female&quot;, &quot;male&quot;), values = c(&quot;solid&quot;, &quot;dotted&quot;)) You can also create different types of graphs very easily and split them into different facets. ICE_Ire %&gt;% drop_na() %&gt;% dplyr::filter(Age != &quot;NA&quot;) %&gt;% dplyr::mutate(Date = factor(Date)) %&gt;% ggplot(aes(x = Age, y = Word.count, fill = Sex)) + facet_grid(vars(Date)) + geom_boxplot() + coord_cartesian(ylim = c(0, 2000)) + theme_bw() + theme(legend.position = &quot;top&quot;) + scale_fill_manual(breaks = c(&quot;female&quot;, &quot;male&quot;), values = c(&quot;#E69F00&quot;, &quot;#56B4E9&quot;)) EXERCISE TIME! ` Create a box plot showing the Date on the x-axis and the words uttered by speakers on the y-axis and group by Sex. Answer ICE_Ire %&gt;% drop_na() %&gt;% dplyr::filter(Sex != &quot;NA&quot;) %&gt;% dplyr::mutate(Date = factor(Date)) %&gt;% ggplot(aes(x = Date, y = Word.count, fill = Sex)) + geom_boxplot() + coord_cartesian(ylim = c(0, 2000)) + theme_bw() + theme(legend.position = &quot;top&quot;) + scale_fill_manual(breaks = c(&quot;female&quot;, &quot;male&quot;), values = c(&quot;#E69F00&quot;, &quot;#56B4E9&quot;)) Create a scatter plot showing the Date on the x-axis and the words uttered by speakers on the y-axis and create different facets for Sex. Answer ICE_Ire %&gt;% drop_na() %&gt;% dplyr::filter(Sex != &quot;NA&quot;, Date != &quot;NA&quot;) %&gt;% dplyr::mutate(Date = factor(Date), Sex = factor(Sex)) %&gt;% ggplot(aes(Date, Word.count, color = Date)) + facet_wrap(vars(Sex), ncol = 2) + geom_point() + coord_cartesian(ylim = c(0, 2000)) + theme_bw() + scale_color_manual(breaks = c(&quot;1990-1994&quot;, &quot;2002-2005&quot;), values = c(&quot;#E69F00&quot;, &quot;#56B4E9&quot;)) ` Advanced Create a bar plot showing the number of men and women by Date. Solution 2.8 Ending R sessions At the end of each session, you can extract information about the session itself (e.g. which R version you used and which versions of packages). This can help others (or even your future self) to reproduce the analysis that you have done. 2.8.1 Extracting session information You can extract the session information by running the sessionInfo function (without any arguments) sessionInfo() ## R version 4.3.2 (2023-10-31 ucrt) ## Platform: x86_64-w64-mingw32/x64 (64-bit) ## Running under: Windows 11 x64 (build 22621) ## ## Matrix products: default ## ## ## locale: ## [1] LC_COLLATE=English_Australia.utf8 LC_CTYPE=English_Australia.utf8 ## [3] LC_MONETARY=English_Australia.utf8 LC_NUMERIC=C ## [5] LC_TIME=English_Australia.utf8 ## ## time zone: Australia/Brisbane ## tzcode source: internal ## ## attached base packages: ## [1] stats graphics grDevices datasets utils methods base ## ## other attached packages: ## [1] flextable_0.9.5 here_1.0.1 tokenizers_0.3.0 tm_0.7-12 ## [5] NLP_0.2-1 readxl_1.4.3 quanteda_3.3.1 tidytext_0.4.1 ## [9] lubridate_1.9.3 forcats_1.0.0 stringr_1.5.1 dplyr_1.1.4 ## [13] purrr_1.0.2 readr_2.1.5 tidyr_1.3.1 tibble_3.2.1 ## [17] ggplot2_3.5.0 tidyverse_2.0.0 ## ## loaded via a namespace (and not attached): ## [1] tidyselect_1.2.1 farver_2.1.1 fastmap_1.1.1 ## [4] fontquiver_0.2.1 janeaustenr_1.0.0 promises_1.2.1 ## [7] digest_0.6.35 timechange_0.3.0 mime_0.12 ## [10] lifecycle_1.0.4 gfonts_0.2.0 magrittr_2.0.3 ## [13] compiler_4.3.2 rlang_1.1.3 sass_0.4.9 ## [16] tools_4.3.2 utf8_1.2.4 yaml_2.3.8 ## [19] data.table_1.15.2 knitr_1.45 labeling_0.4.3 ## [22] askpass_1.2.0 stopwords_2.3 curl_5.2.1 ## [25] xml2_1.3.6 klippy_0.0.0.9500 httpcode_0.3.0 ## [28] withr_3.0.0 grid_4.3.2 fansi_1.0.6 ## [31] gdtools_0.3.7 xtable_1.8-4 colorspace_2.1-0 ## [34] scales_1.3.0 crul_1.4.0 cli_3.6.2 ## [37] rmarkdown_2.26 crayon_1.5.2 ragg_1.3.0 ## [40] generics_0.1.3 RcppParallel_5.1.7 rstudioapi_0.16.0 ## [43] tzdb_0.4.0 cachem_1.0.8 assertthat_0.2.1 ## [46] parallel_4.3.2 cellranger_1.1.0 vctrs_0.6.5 ## [49] Matrix_1.6-5 jsonlite_1.8.8 slam_0.1-50 ## [52] fontBitstreamVera_0.1.1 bookdown_0.38 hms_1.1.3 ## [55] systemfonts_1.0.6 jquerylib_0.1.4 glue_1.7.0 ## [58] stringi_1.8.3 gtable_0.3.4 later_1.3.2 ## [61] munsell_0.5.0 pillar_1.9.0 htmltools_0.5.8 ## [64] openssl_2.1.1 R6_2.5.1 textshaping_0.3.7 ## [67] rprojroot_2.0.4 evaluate_0.23 shiny_1.8.1 ## [70] lattice_0.21-9 highr_0.10 SnowballC_0.7.1 ## [73] renv_1.0.5 fontLiberation_0.1.0 httpuv_1.6.15 ## [76] bslib_0.7.0 zip_2.3.1 uuid_1.2-0 ## [79] Rcpp_1.0.12 fastmatch_1.1-4 officer_0.6.5 ## [82] xfun_0.43 pkgconfig_2.0.3 2.9 Going further If you want to know more, would like to get some more practice, or would like to have another approach to R, please check out the workshops and resources on R provided by the UQ library. In addition, there are various online resources available to learn R (you can check out a very recommendable introduction here). Here are also some additional resources that you may find helpful: Grolemund. G., and Wickham, H., R 4 Data Science, 2017. Highly recommended! (especially chapters 1, 2, 4, 6, and 8) Stat545 - Data wrangling, exploration, and analysis with R. University of British Columbia. http://stat545.com/ Swirlstats, a package that teaches you R and statistics within R: https://swirlstats.com/ DataCamp’s (free) Intro to R interactive tutorial: https://www.datacamp.com/courses/free-introduction-to-r DataCamp’s advanced R tutorials require a subscription. *Twitter: Explore RStudio Tips https://twitter.com/rstudiotips Explore #rstats, #rstudioconf "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
